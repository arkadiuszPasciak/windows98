name: CI/CD

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      reason:
        description: "Why are you running manually?"
        required: true

jobs:
  install-cache:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.19.0]
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3.5.0

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Cache build artifacts
        id: cache-build
        uses: actions/cache@v3
        with:
          path: |
            **/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install PNPM
        run: npm install -g pnpm@10.13.1

      - name: Install Dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: pnpm install

      - name: Build Workspaces
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: pnpm run --filter @windows98/ci-cd build

  type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.19.0]
    needs: install-cache
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3.5.0

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore pnpm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install PNPM
        run: npm install -g pnpm@10.13.1

      - name: Install Dependencies
        run: pnpm install
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Check types
        run: pnpm --filter @windows98/ci-cd run lint:types:run

  code-lint-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.19.0]
    needs: type-check
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3.5.0

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore pnpm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install PNPM
        run: npm install -g pnpm@10.13.1

      - name: Install Dependencies
        run: pnpm install
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Lint code
        run: pnpm --filter @windows98/ci-cd run lint:code:run

  stylelint-lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.19.0]
    needs: type-check
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3.5.0

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore pnpm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install PNPM
        run: npm install -g pnpm@10.13.1

      - name: Install Dependencies
        run: pnpm install
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Lint with Stylelint
        run: pnpm --filter @windows98/ci-cd run lint:styles:run

  vitest-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.19.0]
    needs: [code-lint-format, stylelint-lint]
    steps:
      - name: Checkout Commit
        uses: actions/checkout@v3.5.0

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore pnpm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install PNPM
        run: npm install -g pnpm@10.13.1

      - name: Install Dependencies
        run: pnpm install
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Run Vitest tests
        run: pnpm run --filter @windows98/ci-cd test:unit:run

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.19.0]
    needs: vitest-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.0

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore pnpm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install PNPM
        run: npm install -g pnpm@10.13.1

      - name: Install Dependencies
        run: pnpm install
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Cache build artifacts
        id: cache-build
        uses: actions/cache@v3
        with:
          path: |
            **/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build Applications
        run: pnpm run --filter @windows98/ci-cd build

  e2e-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.19.0]
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.0

      - name: Install Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore pnpm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install PNPM
        run: npm install -g pnpm@10.13.1

      - name: Install Dependencies
        run: pnpm install
        if: steps.cache-dependencies.outputs.cache-hit != 'true'

      - name: Install Playwright Browsers
        run: pnpm --filter @windows98/design-system exec playwright install --with-deps

      - name: Design System & Micro Frontend E2E Tests
        run: pnpm run --filter @windows98/ci-cd test:ui:run

  deploy-preview:
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - uses: actions/checkout@v3.5.0

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/dist
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install PNPM
        run: npm install -g pnpm@10.13.1

      - name: Install Dependencies
        run: pnpm install

      - name: Install Vercel CLI Locally
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: npx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: npx vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
